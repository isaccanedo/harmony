#!/bin/bash

# Function to prompt the user and convert 'y' or 'n' to 'true' or 'false'
function prompt_user {
  local prompt_message="$1"
  local variable_name="${prompt_message// /_}"
  variable_name=$(echo "$variable_name" | tr '[:lower:]' '[:upper:]')

  read -p "$prompt_message (y/n): " user_input
  user_input=$(echo "$user_input" | tr '[:upper:]' '[:lower:]')

  if [ "$user_input" == "y" ]; then
      eval "$variable_name=true"
  else
      eval "$variable_name=false"
  fi
}

read -p "Service name: " SERVICE_NAME

# Convert SERVICE_NAME to uppercase and change dashes to underscores
SERVICE_NAME_UPPER=$(echo "$SERVICE_NAME" | tr '[:lower:]-' '[:upper:]_')

# Check if the service already exists in the config file
if grep -q "^\s*- name: $SERVICE_NAME" config/services.yml; then
  echo "Service with name '$SERVICE_NAME' already exists in config/services.yml. Not modifying."
else
  read -p "Organization name (used in docker image name): " ORGANIZATION
  prompt_user "Bbox subsetting"
  prompt_user "Shapefile subsetting"
  prompt_user "Temporal subsetting"
  prompt_user "Variable subsetting"
  prompt_user "Reprojection"
  prompt_user "Concatenation"
  read -p "List of CMR UAT collection IDs (comma separated) to use the service (eg C1-PROV1,C2-PROV1,C3-PROV2): " COLLECTIONS

  # Create the new service directory at the same level as the harmony repository
  SERVICE_DIR="../harmony-$SERVICE_NAME"
  echo "Creating project directory $SERVICE_DIR"
  mkdir "$SERVICE_DIR"
  # Copy the Dockerfile, replacing the service name
  env SERVICE_NAME=$SERVICE_NAME envsubst < service-templates/Dockerfile > "$SERVICE_DIR/Dockerfile"
  # Copy the example service python file
  cp service-templates/sample_service.py "$SERVICE_DIR/$SERVICE_NAME.py"
  cp service-templates/README "$SERVICE_DIR"
  # Copy the build script
  env SERVICE_NAME=$SERVICE_NAME ORGANIZATION=$ORGANIZATION envsubst < service-templates/build-service > "$SERVICE_DIR/build-service"
  chmod +x "$SERVICE_DIR/build-service"

  # Update services.yml - put the service at the top of the UAT configuration section so that it is matched first for testing
  awk -v SERVICE_NAME="$SERVICE_NAME" \
    -v ORGANIZATION="$ORGANIZATION" \
    -v CONCATENATION="$CONCATENATION" \
    -v BBOX_SUBSETTING="$BBOX_SUBSETTING" \
    -v VARIABLE_SUBSETTING="$VARIABLE_SUBSETTING" \
    -v TEMPORAL_SUBSETTING="$TEMPORAL_SUBSETTING" \
    -v REPROJECTION="$REPROJECTION" \
    -v SERVICE_NAME_UPPER="$SERVICE_NAME_UPPER" \
    -v QUERY_CMR_IMAGE="$QUERY_CMR_IMAGE" \
'{
    print;
    if ($0 == "https://cmr.uat.earthdata.nasa.gov:") {
        print "";
        print "  - name: " SERVICE_NAME;
        print "    description: |";
        print "      TODO - fill in description";
        print "    data_operation_version: '\''0.18.0'\''";
        print "    type:";
        print "      <<: *default-turbo-config";
        print "      params:";
        print "        <<: *default-turbo-params";
        print "        env:";
        print "          <<: *default-turbo-env";
        print "          STAGING_PATH: public/" ORGANIZATION "/" SERVICE_NAME;
        print "    umm_s: '\'\''";
        print "    capabilities:";
        print "      concatenation: " CONCATENATION;
        print "      subsetting:";
        print "        bbox: " BBOX_SUBSETTING;
        print "        variable: " VARIABLE_SUBSETTING;
        print "        temporal: " TEMPORAL_SUBSETTING;
        print "      output_formats:";
        print "        - application/netcdf4";
        print "      reprojection: " REPROJECTION;
        print "    steps:";
        print "      - image: !Env ${QUERY_CMR_IMAGE}";
        print "        is_sequential: true";
        print "      - image: !Env ${" SERVICE_NAME_UPPER "_IMAGE}";
    }
}' config/services.yml > config/services.tmp.yml && mv config/services.tmp.yml config/services.yml

fi

if grep -q "^$SERVICE_NAME_UPPER" services/harmony/env-defaults; then
  echo "Service with name '$SERVICE_NAME' already set up in env-defaults. Not modifying."
else
  if [[ -z $ORGANIZATION ]]; then
    read -p "Organization name (used in docker image name): " ORGANIZATION
  fi
  # Create the environment variables
  echo "Adding environment variables to main harmony services/harmony/env-defaults"
  cat <<-EOF >> services/harmony/env-defaults
${SERVICE_NAME_UPPER}_IMAGE=$ORGANIZATION/$SERVICE_NAME:latest
${SERVICE_NAME_UPPER}_REQUESTS_MEMORY=128Mi
${SERVICE_NAME_UPPER}_LIMITS_MEMORY=512Mi
${SERVICE_NAME_UPPER}_INVOCATION_ARGS='python -m $SERVICE_NAME'
${SERVICE_NAME_UPPER}_SERVICE_QUEUE_URLS='["$ORGANIZATION/$SERVICE_NAME:latest,http://sqs.us-west-2.localhost.localstack.cloud:4566/000000000000/$SERVICE_NAME.fifo"]'

EOF

  echo "Adding queue URL variable to packages/util env-defaults"
  cat <<-EOF >> packages/util/env-defaults
${SERVICE_NAME_UPPER}_SERVICE_QUEUE_URLS='["$ORGANIZATION/$SERVICE_NAME:latest,http://sqs.us-west-2.localhost.localstack.cloud:4566/000000000000/$SERVICE_NAME.fifo"]'

EOF
  echo "Configuring local .env file to deploy your service and add the collections to test"
  cat <<-EOF >> .env
${SERVICE_NAME_UPPER}_COLLECTIONS=$COLLECTIONS

EOF
  sed -i '' "s/^LOCALLY_DEPLOYED_SERVICES=.*/&,${SERVICE_NAME}/" .env
fi

echo "Successfully setup project. You can take a look at env-defaults, .env, and config/services.yml to see how your service was set up for use in harmony.
Next steps:
cd ../harmony-${SERVICE_NAME}
Modify the ${SERVICE_NAME}.py file to replace the sample code in the process_item method with your service logic.
Build the image with ./build-service

Return to this directory and start up all of harmony including your service with:
cd ../harmony && ./bin/bootstrap-harmony
Once the command completes you can issue harmony requests for your collection and test your service."
